{% extends "parts/base" %}
{%- block title -%}
	DebugExtension
{%- endblock %}
{% block content %}

<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Commands"><span class="tocnumber">1</span> <span class="toctext">Commands</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Usage"><span class="tocnumber">2</span> <span class="toctext">Usage</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Environment_Variable"><span class="tocnumber">2.1</span> <span class="toctext">Environment Variable</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Inside_a_debugger"><span class="tocnumber">2.2</span> <span class="toctext">Inside a debugger</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-5"><a href="#Debug_Functions"><span class="tocnumber">3</span> <span class="toctext">Debug Functions</span></a>
<ul>
<li class="toclevel-2 tocsection-6"><a href="#Usage_in_gdb_macros"><span class="tocnumber">3.1</span> <span class="toctext">Usage in gdb macros</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Installation_for_the_FirmEvaluator_DLL_for_DevStudio.2FVisual_Studio"><span class="tocnumber">3.2</span> <span class="toctext">Installation for the FirmEvaluator DLL for DevStudio/Visual Studio</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h1><span class="mw-headline" id="Commands"> Commands </span></h1>
<table border="1" cellspacing="0">
	<tr>
		<td width="25%">init </td>
		<td width="60%">break after initialization</td>
	</tr>
	<tr>
		<td>create nr </td>
		<td> break if node nr was created</td>
	</tr>
	<tr>
		<td>replace nr </td>
		<td> break if node nr is replaced by another node</td>
	</tr>
	<tr>
		<td>lower nr </td>
		<td> break before node nr is lowered</td>
	</tr>
	<tr>
		<td>remirg nr/name </td>
		<td> break if the irg of nr or entity name is deleted</td>
	</tr>
	<tr>
		<td>newent nr/name </td>
		<td> break if the entity nr or name was created</td>
	</tr>
	<tr>
		<td>newtype nr/name </td>
		<td> break if the type nr or name was created</td>
	</tr>
	<tr>
		<td>bp </td>
		<td> show all breakpoints</td>
	</tr>
	<tr>
		<td>enable nr </td>
		<td> enable breakpoint nr</td>
	</tr>
	<tr>
		<td>disable nr </td>
		<td> disable breakpoint nr</td>
	</tr>
	<tr>
		<td>showtype nr/name </td>
		<td> show content of type nr or name</td>
	</tr>
	<tr>
		<td>showent nr/name </td>
		<td> show content of entity nr or name</td>
	</tr>
	<tr>
		<td>setmask name msk </td>
		<td> sets the debug module to mask msk</td>
	</tr>
	<tr>
		<td>setlvl name lvl </td>
		<td> sets the debug module name to level lvl</td>
	</tr>
	<tr>
		<td>setoutfile name file </td>
		<td> redirects debug output of module name to file</td>
	</tr>
	<tr>
		<td>irgname name </td>
		<td> prints address and graph number of a method given by its name</td>
	</tr>
	<tr>
		<td>irgldname name </td>
		<td> prints address and graph number of a method given by its ldname</td>
	</tr>
	<tr>
		<td>help </td>
		<td> list all commands</td>
	</tr>
	<tr>
		<td>dumpfilter name</td>
		<td>only dump graphs containing the given name</td>
	</tr>
</table>
<h1><span class="mw-headline" id="Usage"> Usage </span></h1>
<p>lib<span class="algo">Firm</span> contains a builtin debug extension helping set breakpoints and inspecting data.
</p>
<h2><span class="mw-headline" id="Environment_Variable"> Environment Variable </span></h2>
<p>When firm starts up the environment variable FIRMDBG is interpreted as debug commands. Examples:
</p><p>Break when node number 123 is created:
</p>
{% code "bash" %}
$ FIRMDBG="create 123" my_firm_compiler
{% endcode %}
<p>Enable full debug logging for the firm.be.prefalloc module:
</p>
{% code "bash" %}
$ FIRMDBG="setmask firm.be.prefalloc -1" my_firm_compiler
{% endcode %}
<h2><span class="mw-headline" id="Inside_a_debugger"> Inside a debugger </span></h2>
<p>The debug extension is accessed using the builtin <span class="var">firm_debug(<i>command</i>)</span> function.
</p><p>In gdb, issue a call
</p>
<pre>call firm_debug(&quot;.help&quot;)
</pre>
<p>In the Visual Studio Debugger, simply place a call into the watch window.
</p>
<h1><span class="mw-headline" id="Debug_Functions"> Debug Functions </span></h1>
<p>Further, the following functions/expression might be useful while debugging
</p>
<table border="1" cellspacing="0">
<tr>
<td>current_ir_graph </td>
<td> the current graph, set by most libFirm functions
</td></tr>
<tr>
<td>dump_ir_block_graph(current_ir_graph, <i>suffix</i>) </td>
<td> dumps the current graph
</td></tr>
<tr>
<td>dump_ir_block_graph_sched(current_ir_graph, <i>suffix</i>) </td>
<td> dumps the current graph with scheduling info
</td></tr></table>
<h2><span class="mw-headline" id="Usage_in_gdb_macros"> Usage in gdb macros </span></h2>
<p>You can predefine gdb macros for common constructs like displaying an ir_node* or dumping the current graph for opening it in ycomp. The following is a good idea:
</p>
<pre>set unwindonsignal on

# FIRM

# The following is able to print most important firm datastructures:
# ir_node*, tarval*, ir_type*, ir_mode* and maybe others should work 
define irn
print gdb_node_helper($arg0)
end

# Hack to display the length of a firm ARR_F or ARR_D
define arrlen
p array_len($arg0)
end

# The following should be used for libfirm after 1.18.0
define dumpg
if $argc == 1
	call dump_ir_graph($arg0, "XXX")
else
	call dump_ir_graph(current_ir_graph, "XXX")
end
end

define firmd
call firm_debug($arg0)
end

define graph
print gdb_node_helper(current_ir_graph)
end

define keep
call add_End_keepalive(get_irg_end(current_ir_graph), $arg0)
end

# cparser
define cpexpr
call print_expression($arg0), (void)putchar('\n')
end

define cpstmt
call print_statement($arg0)
end

define cptype
call print_type($arg0), (void)putchar('\n')
end
</pre>
<h2><span class="mw-headline" id="Installation_for_the_FirmEvaluator_DLL_for_DevStudio.2FVisual_Studio"> Installation for the FirmEvaluator DLL for DevStudio/Visual Studio </span></h2>
<p>The FirmEvaluator shows complex <span class="algo">Firm</span> data structures like nodes or bitsets directly in the Visula Studio Debuggers.
</p><p><a href="File:FirmEvaluator.gif" class="image"><img alt="FirmEvaluator.gif" src="images/FirmEvaluator.gif" width="380" height="80" /></a>
</p><p>Copy the firmEvaluator.dll to an appropriate place. 
</p><p>VC6: &lt;InstallRoot&gt;\Common\MSDev98\Bin\IDE
VS2003/VS2005: &lt;Visual Studio folder&gt;\Common7\Packages\Debugger
</p><p>Open the file AutoExp.dat in
</p><p>VC6: &lt;Visual Studio folder&gt;\Common\MSDev98\Bin
VS2003/VS2005: &lt;Visual Studio folder&gt;\Common7\Packages\Debugger
</p><p>Add the following to the [AutoExpand] section:
</p>
<pre>; firm evaluator
_arch_register_class_t=name=&lt;name,s&gt;
arch_register_class_t=name=&lt;name,s&gt;
_arch_register_t=name=&lt;name,s&gt; idx=&lt;index,d&gt;
arch_register_t=name=&lt;name,s&gt; idx=&lt;index,d&gt;

ir_graph=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_node=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_op=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_op_Evaluate)
entity=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_entity=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_prog=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_mode=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_type=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
tarval=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
ir_loop=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_Evaluate)
_ident=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_ident_Evaluate)
pset=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_pset_Evaluate)
set=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_set_Evaluate)
pmap=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_set_Evaluate)
eset=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_set_Evaluate)
_arr_descr=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_arr_Evaluate)
pdeq=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_pdeq_Evaluate)
_bitset_t=$ADDIN(&lt;path to dll&gt;firmEvaluator.dll,firm_bitset_Evaluate)
</pre>
<p>&lt;path to dll&gt; can be omitted if the DLL is copied to ts default directory.
</p><p>The FirmEvaluator decodes the following data structions:
</p>
<table border="1" cellspacing="0">
<tr>
<td>ir_graph  </td>
<td> IRG:{name} [graph number, number of nodes]
</td></tr>
<tr>
<td>ir_node   </td>
<td> {Node Op}{mode} [node number:node index]
</td></tr>
<tr>
<td>ir_entity </td>
<td> ENT:{entity name} [entity number]
</td></tr>
<tr>
<td>ir_type   </td>
<td> {Type op} {name} [type number]
</td></tr>
<tr>
<td>ir_op     </td>
<td> operation name
</td></tr>
<tr>
<td>ir_mode   </td>
<td> mode name
</td></tr></table>
<p><br />
For the EDG Java frontend the following might be interesting:
</p>
<pre>; edgjfe
a_text_buffer=size=&lt;size,u&gt; text=&lt;buffer,s&gt;
</pre>

{% endblock %}
