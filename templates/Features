{% extends "parts/base" %}
{%- block title -%}
	Features
{%- endblock %}
{% block content %}

<h2>About</h2>
<ul>
	<li>Works exclusively on a graph-based SSA representation ("sea of nodes") until emission of assembly code.</li>
	<li>Written in portable C99: Known to compile with gcc, clang and icc on Linux, FreeBSD, Cygwin.</li>
	<li>Includes doxygen documentation</li>
</ul>

<h2>Analyses</h2>
<ul>
	<li>Dominance</li>
	<li>Loop Tree</li>
	<li>Execution frequency (estimated, profiling with instrumentation)</li>
	<li>Control Dependencies</li>
	<li>Inter-procedural Call Graph</li>
	<li>Def-Use</li>
	<li>Alias Analysis</li>
</ul>

<h2>Optimizations</h2>
<ul>
	<li>Dead Code Elimination (<i>happens implicitly</i>)</li>
	<li>Constant Folding (<i>happens on the fly</i>)</li>
	<li>Local Common Subexpression Elimination (<i>happens on the fly</i>)</li>
	<li>Arithmetic Identities (<i>happens on the fly</i>)</li>
	<li>Unreachable Code Elimination</li>
	<li>Global Common Subexpression Elimination</li>
	<li>Code Placement</li>
	<li>Operator Strength Reduction</li>
	<li>Scalar Replacement</li>
	<li>Load/Store Optimisation</li>
	<li>Control Flow Optimisations</li>
	<li>If-conversion</li>
	<li>Jump Threading</li>
	<li>Reassociation</li>
	<li>Tail Recursion Elimination</li>
	<li>Inlining</li>
	<li>Procedure Cloning</li>
</ul>

<h2>Code Generation</h2>
<ul>
	<li>Mature code generation for x86 (32-bit) with support for x87 and SSE2 floating point</li>
	<li>Mature code generation for SPARC</li>
	<li>Code generation for x86-64</li>
	<li>Experimental code generation for ARM</li>
	<li>Novel SSA based register allocator</li>
	<li>Several spilling algorithms</li>
	<li>Several copy coalescing algorithms</li>
	<li>Algorithms for instruction and basic block scheduling</li>
	<li>ABI handling helpers</li>
</ul>

<h2>Development Support</h2>
<ul>
	<li>Extensive checkers</li>
	<li>Builtin debugger: breakpoints on node creation/entity creation, graph dumping, visual studio debug extension</li>
	<li>Lowering of intrinsics, double word arithmetics, bitfields</li>
</ul>

{% endblock %}
