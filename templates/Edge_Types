{% extends "parts/base" %}
{%- block title -%}
	EdgeTypes
{%- endblock %}
{% block content %}

<p>People, who know intermediate representations from text books,
are often confused because Firm shows edges in the wrong direction.
Instead of data flow, Firm provides data dependencies,
which is usually more convenient in praxis.
So, "forward" means from the End to the Start node.
</p>
<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Forward_Edges"><span class="tocnumber">1</span> <span class="toctext">Forward Edges</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Data_Dependencies_.28black.29"><span class="tocnumber">1.1</span> <span class="toctext">Data Dependencies (black)</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Reversed_Control_Flow_Edges_.28red.29"><span class="tocnumber">1.2</span> <span class="toctext">Reversed Control Flow Edges (red)</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#Special_Case:_Back_Edges"><span class="tocnumber">1.2.1</span> <span class="toctext">Special Case: Back Edges</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-5"><a href="#Memory_Dependencies_.28blue.29"><span class="tocnumber">1.3</span> <span class="toctext">Memory Dependencies (blue)</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Keeps_.28violet.29"><span class="tocnumber">1.4</span> <span class="toctext">Keeps (violet)</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Other_Dependencies_.28green.29"><span class="tocnumber">1.5</span> <span class="toctext">Other Dependencies (green)</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-8"><a href="#Reverse_Edges"><span class="tocnumber">2</span> <span class="toctext">Reverse Edges</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#Outs"><span class="tocnumber">2.1</span> <span class="toctext">Outs</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Out_Edges"><span class="tocnumber">2.2</span> <span class="toctext">Out Edges</span></a></li>
</ul>
</li>
</ul>
</td></tr></table>
<h2><span class="mw-headline" id="Forward_Edges"> Forward Edges </span></h2>
<h4><span class="mw-headline" id="Data_Dependencies_.28black.29"> Data Dependencies (black) </span></h4>
<p>These are the most common edges.
An operation is connected with a data dependency to its operands.
</p>
<h4><span class="mw-headline" id="Reversed_Control_Flow_Edges_.28red.29"> Reversed Control Flow Edges (red) </span></h4>
<p>Reversed, these edges form (sort of) a control flow graph.
However, these edges go to the operation (not the block),
which is used to jump to the source block.
</p><p>These edges are not control dependencies!
</p>
<h5><span class="mw-headline" id="Special_Case:_Back_Edges"> Special Case: Back Edges </span></h5>
<p>A reversed control flow edge, where the block of the target node dominates (or is) the source block.
</p><p>Do not confuse back edges with reversed edges!
</p>
<h4><span class="mw-headline" id="Memory_Dependencies_.28blue.29"> Memory Dependencies (blue) </span></h4>
<p>Memory dependencies represent a special form of data dependency,
where the value is the memory.
In contrast to other SSA values, memory cannot be duplicated.
Intuitively, a store operation consumes the whole memory state
and produces a new state.
</p>
<h4><span class="mw-headline" id="Keeps_.28violet.29"> Keeps (violet) </span></h4>
<p>If code is dead, but <a href="Unreachable_Code.html" title="Unreachable Code">reachable</a>, e.g. infinite loops,
the keep edges are Firm's hack to "keep" the code,
because they provide a path from the End node.
</p>
<h4><span class="mw-headline" id="Other_Dependencies_.28green.29"> Other Dependencies (green) </span></h4>
<p>Additional dependencies with no special semantics.
</p>
<h2><span class="mw-headline" id="Reverse_Edges"> Reverse Edges </span></h2>
<p>Sometimes it is necessary to walk a Firm graph in data <i>flow</i> order.
So libFirm provides the following mechanisms.
</p>
<h4><span class="mw-headline" id="Outs"> Outs </span></h4>
<p>Outs are the reversed form of the dependencies above.
However, any change to the graph makes this edges inconsistent,
but the corresponding flag is not set implicitly.
</p>
<h4><span class="mw-headline" id="Out_Edges"> Out Edges </span></h4>
<p>These are like outs, but are updated automatically.
This automatic updates can be switched on and off (edges_activate, edges_deactivate).
However,
keep in mind that
this means that dead code does not disappear implicitly,
because it is still referenced by out edges.
</p>
{% endblock %}
