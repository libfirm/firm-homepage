{% extends "parts/base" %}
{%- block title -%}
	Statistics
{%- endblock %}
{% block content %}

<table id="toc" class="toc"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Introduction"><span class="tocnumber">1</span> <span class="toctext">Introduction</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Events_.26_Contexts"><span class="tocnumber">2</span> <span class="toctext">Events &amp; Contexts</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Change_your_code_to_produce_events"><span class="tocnumber">3</span> <span class="toctext">Change your code to produce events</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Activating_events_in_the_firm_library.2Fcompiler"><span class="tocnumber">4</span> <span class="toctext">Activating events in the firm library/compiler</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#Generating_Events_Manually"><span class="tocnumber">5</span> <span class="toctext">Generating Events Manually</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#Analysing_event_traces"><span class="tocnumber">6</span> <span class="toctext">Analysing event traces</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Producing_nice_looking_latex_Graphics"><span class="tocnumber">7</span> <span class="toctext">Producing nice looking latex Graphics</span></a></li>
</ul>
</td></tr></table>

<h1><span class="mw-headline" id="Introduction"> Introduction </span></h1>
<p>Collecting compilation statistics like the number of instructions, basic blocks, load or store instruction, the time spent in each phase, etc. are important information for development and analysis of the compiler. Gathering fine grained statistics, can result in a huge amount of data. lib<span class="algo">Firm</span> features a sophisticated statistics system which simplifies storage, retrieval and analysis of such data. (Actually firm has several statistic systems, the recommended approach, which is described here, is using ir/stat/statev.*)
</p>

<h1><span class="mw-headline" id="Events_.26_Contexts"> Events &amp; Contexts </span></h1>
<p>The basis of the statistics are statistic-events. A <i>statistic-event</i> is a pair of an event name and a double value. A compiler can throw a statistic event at any time in the compilation process. Typical examples for an event are the number of instructions modified during a phase, or a time measurement of some algorithmic step.
</p><p>Events have to be put into some context to be useful. You want to know which file and which function was compiled, or which compiler flags were used. Contexts can often be thought of in an hierarchical manner: On the upper level you have data like compiler flags or the file that is compiled. Going down the hierarchy you find things like the function currently being compiled or the register class getting assigned some registers. Because of this hierarchic nature contexts in this system are organized as a stack.
</p><p>To keep track of the context, a series of <i>context-push</i> and <i>context-pop</i> events is generated by the compiler. A typical context is bemain_irg which represents the currently processed graph in the backend, or the refinement bechordal_cls which specifies the current register class during register allocation.
</p><p>A sequence of normal events, context-push and context-pop events form a <i>statistic trace</i>.
</p>

<h1><span class="mw-headline" id="Change_your_code_to_produce_events"> Change your code to produce events </span></h1>
<p>Events can be generated by calling <i>stat_ev_dbl</i>:
</p>
{% code "c" %}
stat_ev_dbl("mymodule_event", event_value);
{% endcode %}
<p>Contexts can be pushed and popped like this:
</p>
{% code "c" %}
stat_ev_ctx_push_str("mymodule_context", context_value);

/* put normal events here */

stat_ev_ctx_pop("mymodule_context");
{% endcode %}
<p>It is good style to add a prefix to the event and context names which describes the module which contains the calls. This makes it easier to filter out events from modules, we're not interested in.
</p>
<h1><span class="mw-headline" id="Activating_events_in_the_firm_library.2Fcompiler"> Activating events in the firm library/compiler </span></h1>
<p>Events can be activated with the --statev cparser switch. The compiler will then generate a file ending in .ev which contains the event trace.
</p><p>For bigger programs like the SPEC it is recommended (and necessary because of the huge amount of data) to restrict the event trace to  events from some modules only. This is done with the --filtev switch which accept a string. Only events (which includes context-pushs and -pops) contain the filtev string will be written to the log. A simple invocation looks like this:
</p>
{% code "bash" %}
$ cparser --statev somefile.c
{% endcode %}

<h1><span class="mw-headline" id="Generating_Events_Manually"> Generating Events Manually </span></h1>

<p>We also successfully used the statev system from scripts in which case you have to produce the event stream manually. Anyway this is quiet easy. You have to generate an asciss file with the following conventions:
</p>
<pre># Push context named CTX with value VAL
P;CTX;VAL
# Pop named CTX
O;CTX
# Record event named EV with value VAL
E;EV;VAL
</pre>
<h1><span class="mw-headline" id="Analysing_event_traces"> Analysing event traces </span></h1>
<p>You can generate summaries and statistics by processing the event traces. libfirm comes with a script which preprocesses the events and puts them into a sqlite (or mysql) database. Example usage:
</p>
{% code "bash" %}
$ statev_sql.py -v -D results.db somefile.ev someotherfile.ev ...
{% endcode %}
<p>This creates a file results.db containing an sqlite database with a table for contexts and events. You can then write SQL-queries to gather data. Example sqlite invocation</p>
{% code "bash" %}
$ sqlite3 results.db
{% endcode %}
<p>Some example queries:</p>
{% code "sql" %}
# Display the number of blocks and instructions for each function:
SELECT c.bemain_irg, sum(e.bemain_blocks_start), sum(e.bemain_insns_start)
FROM ctx as c, ev as e
WHERE e.id = c.id
GROUP BY c.bemain_irg
{% endcode %}

{% code "sql" %}
# Display the maximal and average register pressure of the ia32_gp register class grouped by filename
SELECT c.bemain_compilation_unit, max(e.bechordal_maximum_register_pressure), avg(e.bechordal_average_register_pressure)
FROM ctx as c, ev as e
WHERE e.id = c.id AND c.bechordal_cls = 'ia32_gp'
GROUP BY c.bemain_compilation_unit
{% endcode %}

<h1><span class="mw-headline" id="Producing_nice_looking_latex_Graphics"> Producing nice looking latex Graphics </span></h1>
<p>You can use the data in scripts to produce tables and tikz pictures for your LaTeX documents. 
</p><p><a href="File:Tableexample.png" class="image"><img alt="Tableexample.png" src="images/Tableexample.png" width="585" height="213" /></a>
<a href="File:Plotexample.png" class="image"><img alt="Plotexample.png" src="images/Plotexample.png" width="383" height="227" /></a>
</p><p>I have added some of my scripts into the firm svn repository as examples:
<a class="external autonumber" href="http://github.com/MatzeB/libfirm/tree/master/scripts/statev_examples">[1]</a>
</p>
{% endblock %}
