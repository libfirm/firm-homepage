{% extends "parts/base" %}
{%- block title -%}
	ObjectOrientation
{%- endblock %}
{% block content %}

<h1><span class="mw-headline" id="Basics"> Basics </span></h1>
<p>Many modern languages use object-oriented constructs. These includes:
</p>
<ul><li> compound-datastructures with associated methods (class types)
</li><li> inheritance hierarchies for class types
</li><li> dynamic-dispatch when calling methods in an class hierarchy
</li><li> multiple-inheritance, in the form of interfaces or "true" C++-style multiple inheritance
</li></ul>
<p>The following 2 are also very common in OO-languages though are orthogonal concepts.
</p>
<ul><li> runtime-type information (introspection of object types, which enable dyanmic casting or reflection)
</li><li> throwing exceptions (these in itself are not an OO-concept) and catching exceptions based on their runtime type
</li><li> Garbage Collection
</li></ul>
<p>This article attempts to describe how to model some of these aspects in firm
</p>
<h1><span class="mw-headline" id="Implement_them_as_a_library"> Implement them as a library </span></h1>
<p>libFirm at its core is concerned with low-level code. object-orientation is consider as a high-level feature which will be lowered to low-level code. Bases on this definition these features should not be part of libfirms core.
Instead we attempt to provide them as an add-on library called liboo.
</p><p>Note though that we should keep libfirms core open for extensions of this kind this means:
</p>
<ul><li> Creating new nodes
</li><li> Registering optimization rules for these new nodes
</li><li> Support creationg of new types/entities? (not possible currently)
</li></ul>

{% endblock %}
